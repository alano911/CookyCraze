#include"bgt_compat.nvgt"
file f, c, mainprojectfile;
string dir;
int depth;
int commentedlines, lines, totallines, classes, includes,bools,ints,strings,arrays,voids,intfuncs,boolfuncs,stringfuncs;
string commentedlinenames;
string classnames;
string includenames;
string boolnames;
string stringnames;
string intnames;
string voidnames;
string intfuncnames;
string stringfuncnames;
string boolfuncnames;
bool inclass;
string classname;
timer analyzetimer;
void main()
{
mainprojectfile.open("ana-project","rb");
string filename=mainprojectfile.read();
if (filename=="")
filename=input_box("Code Analyzer","Enter the filename of the project you wish to analyze.");
if (filename!="")
{
analyzetimer.restart();
f.open("analysis.txt","wb");
string analysis;
analyze_file(filename);
f.write("Analysis for file: "+filename+"\r\nAnalysis for file: "+filename+"\r\nLines in this script: "+lines+"\r\n<Total lines of all scripts in this project: "+totallines+"\r\n\r\nOther statistics\r\nCommented lines: "+commentedlines+"\r\n"+commentedlinenames+"\r\n\r\nTotal includes: "+includes+"\r\n"+includenames+"\r\n\r\nTotal classes: "+classes+"\r\n\r\n"+classnames+"\r\n\r\nVariable Analysis\r\nTotal variables: "+(ints+strings+bools)+"\r\nTotal ints: "+ints+"\r\n"+intnames+"\r\nTotal strings: "+strings+"\r\n"+stringnames+"\r\nTotal booleans: "+bools+"\r\n"+boolnames+"\r\n\r\nFunction analisys\r\nTotal void functions: "+voids+"\r\n"+voidnames+"\r\nString functions: "+stringfuncs+"\r\n"+stringfuncnames+"\r\nBoolean functions: "+boolfuncs+"\r\n"+boolfuncnames+"\r\n\r\nInt functions: "+intfuncs+"\r\n"+intfuncnames+"\r\n\r\n");
alert("Analysis finished!","Analysis has finished! Total analysis took "+analyzetimer.elapsed+" MS.");
}
}
void analyze_file(string fn, bool mainfile=true)
{
if (dir!="")
fn=dir+string_replace(fn,dir,"",true);
file f;
f.open("ana-exclude","rb");
string[] exclude=string_split(f.read(), "\r\n",false);
for (uint i=0; i<exclude.length(); i++)
{
if (string_contains(fn,exclude[i],1)>-1)
{
return;
}
}
c.open(fn,"rb");
string[] code=string_split(c.read(), "\r\n",false);
c.close();
if (mainfile==false)
includenames+=" "+fn+"\r\n";
for (uint i=0; i<code.length(); i++)
{
if (mainfile==true)
lines+=1;
totallines+=1;
if (code[i].length()>3 and code[i][0]=="/" and code[i][1]=="/")
{
commentedlines+=1;
commentedlinenames+=" "+string_replace(code[i],"//","",true)+", File: "+fn+" On line: "+i+"\r\n";
}
if (code[i].length()>5 and code[i][0]=="c" and code[i][1]=="l" and code[i][2]=="a" and code[i][3]=="s" and code[i][4]=="s" and code[i][5]==" ")
{
classes+=1;
classnames+=" "+string_replace(code[i],"class ","",true)+", File: "+fn+" On line: "+i+"\r\n";
inclass=true;
classname=string_replace(code[i],"class ","",true);
classname=string_replace(classname,";","",true);
}
if (code[i].length()>5 and code[i][0]=="v" and code[i][1]=="o" and code[i][2]=="i" and code[i][3]=="d" and code[i][4]==" ")
{
voids+=1;
voidnames+=" "+string_replace(code[i],"void ","",true)+", File: "+fn+" On line: "+i+"";
if (inclass==true)
voidnames+=" In class "+classname;
voidnames+="\r\n";
}
if (code[i].length()>5 and code[i][0]=="b" and code[i][1]=="o" and code[i][2]=="o" and code[i][3]=="l" and code[i][4]==" " and string_contains(code[i],"(",1)==-1)
{
if (inclass==true and depth<=1 or inclass==false and depth==0)
{
if (string_contains(code[i],",",1)>-1)
{
string[] stuff=string_split(code[i],",",true);
for (uint i=0; i<stuff.length(); i++)
{
string name=string_replace(stuff[i],"bool ","",true);
name=string_replace(name,";","",true);
bools+=1;
boolnames+=" "+name+", File: "+fn+" On line: "+i;
if (inclass==true)
boolnames+=" In class "+classname;
boolnames+="\r\n";
}
}
else
{
bools+=1;
string s=string_replace(code[i],";","",true);
boolnames+=" "+string_replace(s,"bool ","",true)+", File: "+fn+" On line: "+i;
if (inclass==true)
boolnames+=" In class "+classname;
boolnames+="\r\n";
}
}
}
if (code[i].length()>5 and code[i][0]=="b" and code[i][1]=="o" and code[i][2]=="o" and code[i][3]=="l" and code[i][4]==" " and string_contains(code[i],"(",1)>-1)
{
boolfuncs+=1;
boolfuncnames+=" "+string_replace(code[i],"bool ","",true)+", File: "+fn+" On line: "+i;
if (inclass==true)
boolfuncnames+=" In class "+classname;
boolfuncnames+="\r\n";
}
if (code[i].length()>4 and code[i][0]=="i" and code[i][1]=="n" and code[i][2]=="t" and code[i][3]==" " and string_contains(code[i],"(",1)==-1)
{
if (inclass==true and depth<=1 or inclass==false and depth==0)
{
if (string_contains(code[i],",",1)>-1)
{
string[] stuff=string_split(code[i],",",true);
for (uint i=0; i<stuff.length(); i++)
{
string name=string_replace(stuff[i],"int ","",true);
name=string_replace(name,";","",true);
ints+=1;
intnames+=" "+name+", File: "+fn+" On line: "+i;
if (inclass==true)
intnames+=" In class "+classname;
intnames+="\r\n";
}
}
else
{
ints+=1;
string s=string_replace(code[i],";","",true);
intnames+=" "+string_replace(s,"int ","",true)+", File: "+fn+" On line: "+i;
if (inclass==true)
intnames+=" In class "+classname;
intnames+="\r\n";
}
}
}
if (code[i].length()>4 and code[i][0]=="i" and code[i][1]=="n" and code[i][2]=="t" and code[i][3]==" " and string_contains(code[i],"(",1)>-1)
{
intfuncs+=1;
intfuncnames+=" "+string_replace(code[i],"int ","",true)+", File: "+fn+" On line: "+i;
if (inclass==true)
intfuncnames+=" In class "+classname;
intfuncnames+="\r\n";
}
if (code[i].length()>6 and code[i][0]=="s" and code[i][1]=="t" and code[i][2]=="r" and code[i][3]=="i" and code[i][4]=="n" and code[i][5]=="g" and code[i][6]==" " and string_contains(code[i],"(",1)==-1)
{
if (inclass==true and depth<=1 or inclass==false and depth==0)
{
if (string_contains(code[i],",",1)>-1)
{
string[] stuff=string_split(code[i],",",true);
for (uint i=0; i<stuff.length(); i++)
{
string name=string_replace(stuff[i],"string ","",true);
name=string_replace(name,";","",true);
strings+=1;
stringnames+=" "+name+", File: "+fn+" On line: "+i;
if (inclass==true)
stringnames+=" In class "+classname;
stringnames+="\r\n";
}
}
else
{
strings+=1;
string s=string_replace(code[i],";","",true);
stringnames+=" "+string_replace(s,"string ","",true)+", File: "+fn+" On line: "+i;
if (inclass==true)
stringnames+=" In class "+classname;
stringnames+="\r\n";
}
}
}
if (code[i].length()>6 and code[i][0]=="s" and code[i][1]=="t" and code[i][2]=="r" and code[i][3]=="i" and code[i][4]=="n" and code[i][5]=="g" and code[i][6]==" " and string_contains(code[i],"(",1)>-1)
{
stringfuncs+=1;
stringfuncnames+=" "+string_replace(code[i],"string ","",true)+", File: "+fn+" On line: "+i;
if (inclass==true)
stringfuncnames+=" In class "+classname;
stringfuncnames+="\r\n";
}
if (string_contains(code[i],"{",1)>-1)
{
depth+=1;
}
if (string_contains(code[i],"}",1)>-1)
{
depth-=1;
if (depth==0 and inclass==true)
{
inclass=false;
classname="";
}
}
if (code[i].length()>4 and code[i][0]=="#" and code[i][1]=="i")
{
string coded=string_replace(code[i],"#include","",true);
coded=string_replace(coded," \"","",true);
coded=string_replace(coded,"\"","",true);
if (string_contains(coded,"/",1)>-1)
{
dir="";
string[] code=string_split(coded,"/",true);
for (uint i=0; i<code.length()-1; i++)
{
dir+=code[i]+"/";
}
}
includes+=1;
analyze_file(coded,false);
}
}
}

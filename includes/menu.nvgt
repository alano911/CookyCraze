void mingamsmenu()
{
form.reset();
form.create_window("Mini games", false);
int flip=form.create_button("Play the &coin flipper");
int slots=form.create_button("play the &slot machine");
form.focus(flip);
while(true)
{
form.monitor();
wait(5);
        if (key_pressed(KEY_ESCAPE))
        {
form.reset();
game();
}
if(form.is_pressed(slots))
{
if(rank<20)
{
speak_buffer("Sorry "+playername+". This minni game is locked. Please be at rank 20 or higher to play this.", "critical");
}
else if(rank>=20)
{
slotsgame();
}
}
if(form.is_pressed(flip))
{
if(rank<10)
{
speak_buffer("Sorry "+playername+". This minni game is locked. Please be at rank 10 or higher to play this.", "critical");
}
else if(rank>=10)
{
coingame();
}
}
}
}
void shopmenu()
{
setupmenu2();
m.add_item_tts("buy upgrades", "bmu");
m.add_item_tts("sell cookies", "slm");
m.add_item_tts("back", "back");
int mres=m.run("Welcome to the cooky store. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
stormuspool.destroy_sound(stortrackslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=ambpool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended("music"+random(1,6)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
game();
}
if(stm=="bmu")
{
buymenu();
}
if(stm=="slm")
{
sellmenu();
}
if(stm=="back")
{
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
stormuspool.destroy_sound(stortrackslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=ambpool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended("music"+random(1,6)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
game();
}
}
void buymenu()
{
setupmenu2();
m.add_item_tts("automatic baking items", "abi");
m.add_item_tts("manule baking items", "mabi");
m.add_item_tts("back", "back");
int mres=m.run("Upgrades menu. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
shopmenu();
}
if(stm=="abi")
{
abimenu();
}
if(stm=="mabi")
{
mabimenu();
}
if(stm=="back")
{
shopmenu();
}
}
void abimenu()
{
setupmenu2();
double autoCookyCost = buy_item(autocooky, autoCookyBaseCost, autoCookyMultiplier);
double autoCookySpeedCost = buy_item(cookyspeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
double maxBuyableAutoCooky = 0;
double tempCoins = coins;
while (tempCoins >= buy_item(autocooky + maxBuyableAutoCooky, autoCookyBaseCost, autoCookyMultiplier))
{
tempCoins -= buy_item(autocooky + maxBuyableAutoCooky, autoCookyBaseCost, autoCookyMultiplier);
maxBuyableAutoCooky++;
}
double maxBuyableAutoCookySpeed = 0;
tempCoins = coins;
while (tempCoins >= buy_item(cookyspeed + maxBuyableAutoCookySpeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier))
{
tempCoins -= buy_item(cookyspeed + maxBuyableAutoCookySpeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
maxBuyableAutoCookySpeed++;
}
m.add_item_tts("Auto cooky, costs " + round(autoCookyCost, 0) + " coins. You can buy " + maxBuyableAutoCooky + ".", "abic");
m.add_item_tts("Auto cooky speed, costs " + round(autoCookySpeedCost, 0) + " coins. You can buy " + maxBuyableAutoCookySpeed + ".", "sabic");
m.add_item_tts("back", "back");
int mres = m.run("Automatic baking menu.", true);
string abm = m.get_item_name(mres);
if (mres == 0)
{
buymenu();
}
if (abm == "abic")
{
if (coins < autoCookyCost)
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy an auto cooky.");
buymenu();
}
input.set_only_allowed_chars("1234567890");
string autocook = input.input("How many auto cookies would you like to buy?");
if (autocook == "") return;
double quantity = string_to_number(autocook);
double totalCost = 0;
for (double i = 0; i < quantity; i++)
{
totalCost += buy_item(autocooky + i, autoCookyBaseCost, autoCookyMultiplier);
}
if (coins >= totalCost)
{
coins -= totalCost;
autocooky += quantity;
pool.play_stationary("buy"+random(1,4)+".ogg",false);
dlg("Purchase successfull! You bought " + round(quantity, 0) + " auto cookies for " + round(totalCost, 0) + " coins.");
buymenu();
}
else
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy " + round(quantity, 0) + " auto cookies.");
buymenu();
}
}
if (abm == "sabic")
{
if (coins < autoCookySpeedCost)
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy an auto cooky speed.");
buymenu();
}
input.set_only_allowed_chars("1234567890");
string autocooksp = input.input("How many auto cookie speeds would you like to buy?");
if (autocooksp == "") return;
double quantity = string_to_number(autocooksp);
double totalCost = 0;
for (double i = 0; i < quantity; i++)
{
totalCost += buy_item(cookyspeed + i, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
}
if (coins >= totalCost)
{
coins -= totalCost;
cookyspeed += quantity;
clicktime-=cookyspeed;
pool.play_stationary("buy"+random(1,4)+".ogg",false);
dlg("Purchase successfull! You bought " + round(quantity, 0) + " auto cooky speeds for " + round(totalCost, 0) + " coins.");
buymenu();
}
else
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy " + round(quantity, 0) + " auto cooky speeds.");
buymenu();
}
}
if (abm == "back")
{
buymenu();
}
}
void mabimenu()
{
setupmenu2();
double manuleCookyCost = buy_item(manulcooky, manualCookyBaseCost, manualCookyMultiplier);
double maxBuyable = 0;
double tempCoins = coins;
while (tempCoins >= buy_item(manulcooky + maxBuyable, manualCookyBaseCost, manualCookyMultiplier))
{
tempCoins -= buy_item(manulcooky + maxBuyable, manualCookyBaseCost, manualCookyMultiplier);
maxBuyable++;
}
m.add_item_tts("Manual cooky, costs " + round(manuleCookyCost, 0) + " coins. " + "You can buy " + maxBuyable + ".", "mabic");
m.add_item_tts("back", "back");
int mres = m.run("Manual baking menu.", true);
string mabm = m.get_item_name(mres);
if (mres == 0)
{
buymenu();
}    
if (mabm == "mabic")
{
if (coins < manuleCookyCost)
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy a manule cooky.");
buymenu();
return;
}
input.set_only_allowed_chars("1234567890");
string manulcook = input.input("How many manule cookies would you like to buy?");
if (manulcook == "") return;
double quantity = string_to_number(manulcook);
double totalCost = 0;
for (double i = 0; i < quantity; i++)
{
totalCost += buy_item(manulcooky + i, manualCookyBaseCost, manualCookyMultiplier);
}
if (coins >= totalCost)
{
coins -= totalCost;
manulcooky += quantity;
pool.play_stationary("buy"+random(1,4)+".ogg",false);
dlg("Purchase successfull! You bought " + round(quantity, 0) + " manule cookies for " + round(totalCost, 0) + " coins.");
buymenu();
}
else
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy " + round(quantity, 0) + " manule cookies.");
buymenu();
}
}
if (mabm == "back")
{
buymenu();
}
}
void sellmenu()
{
s.enable_beeps = true;
s.speak_percentages = true;
create_slider();
s.add_slider_item("sail amount", 0, 100, sailstart, sailstep);
int sres = s.run_slider("Choose the percentage of cookies you'd like to sell:", 0);
if (sres == 0)
{
shopmenu();
}
double percentToSell = s.get_item_value(0);
double cookiesToSell = double(cookies * (percentToSell / 100.0));
if (cookiesToSell <= 0 && percentToSell > 0)
{
cookiesToSell = 1;
}
double totalCoinsEarned = cookiesToSell * 10;
if (cookiesToSell > cookies)
{
pool.destroy_sound(alertslot);
pool.play_stationary("sellfail.ogg",false);
dlg("Error: You only have " + cookies + " cookies available to sell.");
shopmenu();
}
cookies -= cookiesToSell;
coins += totalCoinsEarned;
if (totalCoinsEarned >= 10 && totalCoinsEarned <= 490)
{
pool.play_stationary("coin1.ogg", false);
}
else if (totalCoinsEarned >= 500 && totalCoinsEarned <= 9990)
{
pool.play_stationary("coin50.ogg", false);
}
else if (totalCoinsEarned >= 10000 && totalCoinsEarned <= 99990)
{
pool.play_stationary("coin1000.ogg", false);
}
else if (totalCoinsEarned >= 100000 && totalCoinsEarned <= 499990)
{
pool.play_stationary("coin10000.ogg", false);
}
else if (totalCoinsEarned >= 500000 && totalCoinsEarned <= 999990)
{
pool.play_stationary("coin50000.ogg", false);
}
else if (totalCoinsEarned >= 1000000 && totalCoinsEarned <= 9999990)
{
pool.play_stationary("coin100000.ogg", false);
}
else if (totalCoinsEarned >= 10000000)
{
pool.play_stationary("coin100000.ogg", false);
}
dlg("Successfully sold " + round(cookiesToSell,0) + " cookies for " + round(totalCoinsEarned, 0) + " coins!");
shopmenu();
}
void preffsmenu()
{
form.reset();
    form.create_window("preferences", false);
    int audsets = form.create_button("&audio settings");
int gamsets = form.create_button("&game settings");
int usersets = form .create_button("&user settings");
form.focus(audsets);
    while (true)
    {
        form.monitor();
        wait(5);
        if (form.is_pressed(gamsets))
        {
gamsetsmenu();
}
        if (form.is_pressed(audsets))
        {
soundsetsmenu();
}
        if (form.is_pressed(usersets))
        {
usersetsmenu();
}
        if (key_pressed(KEY_ESCAPE))
        {
form.reset();
game();
}
    }
}
void gamsetsmenu()
{
    form.reset();
    form.create_window("Game Settings", false);
int introSFX = form.create_checkbox("Enable playing the intro sound upon launching the game.", introsfx);
int logoSFX = form.create_checkbox("Enable playing the logo sound upon launching the game.", logosfx);
int coinSFX = form.create_checkbox("Enable coin sound effects when earning money.", coinsfx);
int rankSFX = form.create_checkbox("Enable rank-up sound effects.", ranksfx);
int playvents = form.create_checkbox("Enable player events during auto baking.", playervents);
int playvents2 = form.create_checkbox("Enable player events during manual baking.", playervents2);
    int autoCookyBaseCostSlider = form.create_slider("Auto Cooky Base Cost.", autoCookyBaseCost, 1, 100, "coins", 1);
    int autoCookyMultiplierSlider = form.create_slider("Auto Cooky Cost Multiplier.", autoCookyMultiplier, 1, 100, "X", 1);
    int autoCookySpeedBaseCostSlider = form.create_slider("Auto Cooky Speed Base Cost.", autoCookySpeedBaseCost, 1, 100, "coins", 1);
    int autoCookySpeedMultiplierSlider = form.create_slider("Auto Cooky Speed Cost Multiplier.", autoCookySpeedMultiplier, 1, 100, "X", 1);
    int manualCookyBaseCostSlider = form.create_slider("Manual Cooky Base Cost.", manualCookyBaseCost, 1, 100, "coins", 1);
    int manualCookyMultiplierSlider = form.create_slider("Manual Cooky Cost Multiplier.", manualCookyMultiplier, 1, 100, "X", 1);
    int sail_start_slider = form.create_slider("Cookie sale start percentage.", sailstart, 0, 100, "percent", 1);
    int sail_end_slider = form.create_slider("Cookie sale end percentage.", sailstep, 0, 100, "percent", 1);
int autoChanceSlider = form.create_slider("Auto-Baking Event chance.", 100 - evchanse, 0, 100, "percent", 1);
int manualChanceSlider = form.create_slider("Manual-Baking Event chance.", 100 - evchanse2, 0, 100, "percent", 1);
    int autoEventList = form.create_list("Auto-Baking Events", autoBakingEvents.length(), true, false);
    for (uint i = 0; i < autoBakingEvents.length(); i++) {
        form.add_list_item(autoEventList, autoBakingEvents[i], autoBakingEvents[i], -1, autoEventToggles[i]);
    }
    int manualEventList = form.create_list("Manual-Baking Events", manualBakingEvents.length(), true, false);
    for (uint i = 0; i < manualBakingEvents.length(); i++) {
        form.add_list_item(manualEventList, manualBakingEvents[i], manualBakingEvents[i], -1, manualEventToggles[i]);
    }
    int coinEventList = form.create_list("Coin Flip Events", coinFlipEvents.length(), true, false);
    for (uint i = 0; i < coinFlipEvents.length(); i++) {
        form.add_list_item(coinEventList, coinFlipEvents[i], coinFlipEvents[i], -1, coinEventToggles[i]);
    }
int savesets = form.create_button("&save settings", true);
int cansets = form.create_button("&cancel");
form.focus(introSFX);
    while (true)
    {
        form.monitor();
        wait(5);
       autoCookyBaseCost = form.get_slider(autoCookyBaseCostSlider);
        autoCookyMultiplier = form.get_slider(autoCookyMultiplierSlider);
        autoCookySpeedBaseCost = form.get_slider(autoCookySpeedBaseCostSlider);
        autoCookySpeedMultiplier = form.get_slider(autoCookySpeedMultiplierSlider);
        manualCookyBaseCost = form.get_slider(manualCookyBaseCostSlider);
        manualCookyMultiplier = form.get_slider(manualCookyMultiplierSlider);
        sailstart = form.get_slider(sail_start_slider);
        sailstep = form.get_slider(sail_end_slider);
evchanse = 100 - form.get_slider(autoChanceSlider);
evchanse2 = 100 - form.get_slider(manualChanceSlider);
introsfx = form.is_checked(introSFX);
logosfx = form.is_checked(logoSFX);
        playervents = form.is_checked(playvents);
        playervents2 = form.is_checked(playvents2);
        coinsfx = form.is_checked(coinSFX);
        ranksfx = form.is_checked(rankSFX);
        if (form.is_pressed(savesets))
        {
writepreffs(autoEventList, manualEventList, coinEventList);
            dlg("settings saved");
            form.reset();
            game();
        }
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
            if (form.is_pressed(cansets))
        {
preffsmenu();
}
}
}
void soundsetsmenu()
{
form.reset();
    form.create_window("audio settings", false);
int gameAmbienceVolumeSlider = form.create_slider("game ambience volume, ", (ambvolume + 50) * 2, 0, 100, "percent", 1);
int gameAmbiencePitchSlider = form.create_slider("game ambience pitch, ", ambpitch / 2, 0, 100, "percent", 1);
int gameMusicVolumeSlider = form.create_slider("game music volume, ", (musvolume + 50) * 2, 0, 100, "percent", 1);
int gameMusicPitchSlider = form.create_slider("game music pitch, ", muspitch / 2, 0, 100, "percent", 1);
int storeMusicVolumeSlider = form.create_slider("store music volume, ", (stormusvolume + 50) * 2, 0, 100, "percent", 1);
int storeMusicPitchSlider = form.create_slider("store music pitch, ", stormuspitch / 2, 0, 100, "percent", 1);
int shuffleamb = form.create_button("change game &ambience");
int shufflemus = form.create_button("change game &music");
int savesets = form.create_button("&save settings", true);
int cansets = form.create_button("&cancel");
form.focus(gameAmbienceVolumeSlider);
    while (true)
    {
        form.monitor();
        wait(5);
ambvolume = (form.get_slider(gameAmbienceVolumeSlider) / 2) - 50;
ambpitch = form.get_slider(gameAmbiencePitchSlider) * 2;
musvolume = (form.get_slider(gameMusicVolumeSlider) / 2) - 50;
muspitch = form.get_slider(gameMusicPitchSlider) * 2;
stormusvolume = (form.get_slider(storeMusicVolumeSlider) / 2) - 50;
stormuspitch = form.get_slider(storeMusicPitchSlider) * 2;
        ambpool.update_sound_start_values(ambslot, 0, ambvolume, ambpitch);
        muspool.update_sound_start_values(mustrackslot, 0, musvolume, muspitch);
stormuspool.update_sound_start_values(stortrackslot, 0, stormusvolume, stormuspitch);
        if (form.is_pressed(shuffleamb))
        {
string ambsound="room"+random(1,4)+".ogg";
ambpool.destroy_sound(ambslot);
ambslot=ambpool.play_stationary_extended(ambsound, true,0,0,ambvolume,ambpitch,false);
    string dispamb = string_replace(ambsound, "", "", true);
    dispamb = string_replace(dispamb, ".ogg", "", true);
speak(dispamb);
    }
        if (form.is_pressed(shufflemus))
        {
string mustrack="music"+random(1,6)+".ogg";
muspool.destroy_sound(mustrackslot);
mustrackslot=muspool.play_stationary_extended(mustrack, true,0,0,musvolume,muspitch,false);
    string disptrack = string_replace(mustrack, "", "", true);
    disptrack = string_replace(disptrack, ".ogg", "", true);
speak(disptrack);
    }
        if (form.is_pressed(savesets))
        {
writepreffs2();
dlg("settings saved");
form.reset();
game();
}
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
            if (form.is_pressed(cansets))
        {
preffsmenu();
}
    }
}
void usersetsmenu()
{
    string gendertext;
    if (playergender == 0)
{
        gendertext = "Male";
    }
else if (playergender == 1)
{
        gendertext = "Female";
    }
else if (playergender == 2)
{
        gendertext = "Non-binary";
    }
else
{
        gendertext = "Unknown";
    }
    form.reset();
    form.create_window("User Settings", false);
    int charname = form.create_button("Change the character's &first name. Currently set to "+playername+".");
    int charname2 = form.create_button("Change the character's &last name. Currently set to "+playername2+".");
    int chargender = form.create_list("Change the character's &gender. Currently set to " + gendertext + ".", 3);
    form.add_list_item(chargender, "Male");
    form.add_list_item(chargender, "Female");
    form.add_list_item(chargender, "Non-binary");
    if (playergender >= 0 && playergender <= 2)
{
        form.set_list_position(chargender, playergender);
    }
int savesets = form.create_button("&save settings", true);
int cansets = form.create_button("&cancel");
form.focus(charname);
    while (true)
    {
        form.monitor();
        wait(5);
playergender = form.get_list_position(chargender);
        if (form.is_pressed(charname))
        {
input.set_only_allowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
string fn=input.input("Enter the first name of this character.");
if(fn.is_empty())
{
alertslot=pool.play_stationary("error.ogg",false);
dlg("Error. Your character's first name is invalid!");
pool.destroy_sound(alertslot);
            form.reset();
            usersetsmenu();
}
else
{
playername=fn;
            dlg("Success! Your character's first name has now been changed to "+playername+".");
            form.reset();
            usersetsmenu();
}
}
        if (form.is_pressed(charname2))
        {
input.set_only_allowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
string fn2=input.input("Enter the last name of this character.");
if(fn2.is_empty())
{
pool.play_stationary("error.ogg",false);
dlg("Error. Your character's last name is invalid!");
pool.destroy_sound(alertslot);
            form.reset();
            usersetsmenu();
}
else
{
playername2=fn2;
            dlg("Success! Your character's last name has now been changed to "+playername2+".");
            form.reset();
            usersetsmenu();
}
}
        if (form.is_pressed(savesets))
        {
            writepreffs3();
            dlg("settings saved");
            form.reset();
            game();
        }
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
            if (form.is_pressed(cansets))
        {
preffsmenu();
}
    }
}

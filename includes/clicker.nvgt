void clicker()
{
form.create_window("CookyCraze", false);
int manulbake=form.create_button("Bake cookies. You currently have "+round(manulcooky,0)+" manule cookies.");
int autobake=form.create_button("Enter baking mode. You currently have "+round(autocooky,0)+" auto cookies.");
int checkHunger = form.create_button("Check hunger status");
int food=form.create_button("Eat cookies. You currently have "+round(cookies,0)+" cookies.");
int flip=form.create_button("flip a coin");
int shop=form.create_button("Cooky store. You currently have "+round(coins,0)+" coins.");
int preffsets=form.create_button("preferences");
form.focus(manulbake);
while(true)
{
form.monitor();
wait(5);
if (form.is_pressed(preffsets))
{
preffsmenu();
}
        if (form.is_pressed(checkHunger))
        {
            if (hunger >= 0 && hunger <= 1000)
            {
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
pool.play_stationary("heart.ogg",false);
                dlg("You're feeling very full. No need to eat right now.");
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
            }
            else if (hunger > 1000 && hunger <= 4000)
            {
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
pool.play_stationary("heart.ogg",false);
                dlg("You're starting to feel a little hungry. Maybe grab a snack soon.");
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
            }
            else if (hunger > 4000 && hunger <= 7000)
            {
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
pool.play_stationary("heart2.ogg",false);
                dlg("You're feeling pretty hungry. You might want to eat something.");
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
            }
            else if (hunger > 7000 && hunger < maxhunger)
            {
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
alertslot=pool.play_stationary("alert_critical.ogg",false);
pool.play_stationary("heart3.ogg",false);
                dlg("You're extremely hungry! You need to eat now.");
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
            }
            else if (hunger >= maxhunger)
            {
                coins = max(0, coins - 10 * rank);
                autocooky = max(0, autocooky - random(10, 20) * rank);
                cookyspeed = min(1000, cookyspeed + random(5, 10) * rank);
                clicktime+=cookyspeed;
manulcooky = max(0, manulcooky - random(10, 20) * rank);
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
alertslot=pool.play_stationary("alert_critical.ogg",false);
pool.play_stationary("heart.ogg",false);
dlg("Extreme hunger has consequences! You lost some coins, auto cookies, manual cookies, and auto-cooky speed boosts.");
hunger=0;
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
            }
        }
if(form.is_pressed(autobake))
{
if(autocooky==0)
{
speak("You need at least 1 auto cooky to enable baking mode.");
}
else if(autocooky>=1)
{
if(bakemode==0)
{
bakemode=1;
pool.play_stationary("toggleon.ogg", false);
speak("Baking mode enabled.");
}
else if(bakemode==1)
{
bakemode=0;
pool.play_stationary("toggleoff.ogg", false);
speak("Baking mode disabled.");
}
}
}
if(form.is_pressed(manulbake))
{
if(bakemode==1)
{
speak("You can't manuely produce cookies when you're in baking mode.");
}
else if(bakemode==0)
{
if(manulcooky==0)
{
speak("You need at least 1 manule cooky to start baking cookies.");
}
else if(manulcooky>=1)
{
cookies+=1*manulcooky;
pool.play_stationary("manulbake" + random(1, 3) + ".ogg", false);
if(playervents2==true) attempt_manebaker_event(evchanse2);
}
}
}
if(form.is_pressed(flip))
{
if(bakemode==1)
{
speak("You can't flip a coin when you're in baking mode.");
}
else if(bakemode==0)
{
if(rank<10)
{
speak("Sorry "+playername+". This minni game is locked. Please be at rank 10 or higher to play this.");
}
else if(rank>=10)
{
if(coins>=1)
{
string[] coinsides={"heads", "tails"};
string side=coinsides[random(0,coinsides.length()-1)];
pool.destroy_sound(eventslot);
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
pool.play_stationary("coinflip" + random(1, 2) + ".ogg", false);        
dlg("you flip a coin. It lands on "+side);
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
        if (side == "heads")
        {
string[]headsEvents={"gain_autocooky", "gain_manulcooky", "gain_cookies", "decrease_hunger", "gain_coins", "increase_cookyspeed"};
            string event = headsEvents[random(0, headsEvents.length() - 1)];
            trigger_coin_event(event);
        }
        else if (side == "tails")
        {
string[]tailsEvents={"lose_autocooky", "lose_manulcooky", "lose_cookies", "increase_hunger", "lose_coins", "decrease_cookyspeed"};
            string event = tailsEvents[random(0, tailsEvents.length() - 1)];
            trigger_coin_event(event);
        }
    }
else if(coins<=0)
{
speak("You don't have a coin to flip!");
}
}
}
}
if(form.is_pressed(shop))
{
if(bakemode==1)
{
speak("You can't enter the cooky store when you're in baking mode.");
}
else if(bakemode==0)
{
if(coins<10)
{
speak("You need at least 10 coins to enter the cooky store.");
}
else if(coins>=10)
{
pool.destroy_sound(ambslot);
pool.destroy_sound(mustrackslot);
speak("You're now entering the cooky store.");
dlgplay("store_door_open.ogg");
alertslot=pool.play_stationary("store_welcome.ogg",false);
storslot=pool.play_stationary("store_amb.ogg",true);
stortrackslot=pool.play_stationary_extended("store_music.ogg",true,0,0,stormusvolume,stormuspitch,false);
shopmenu();
}
}
}
if (form.is_pressed(food))
{
    if (cookies > 0)
{
        double cookiesToEat = min(100 * rank, cookies);
pool.destroy_sound(foodslot);
        foodslot = pool.play_stationary("eatcookies.ogg", false);
        cookies -= cookiesToEat;
          hunger = max(0, hunger - cookiesToEat);
        if (hunger <= 0)
{
            pool.destroy_sound(foodslot);
            pool.destroy_sound(eventslot);
            if (playergender == 0) eventslot = pool.play_stationary("male_vomit.ogg", false);
            if (playergender == 1) eventslot = pool.play_stationary("female_vomit.ogg", false);
speak("You ate too much! You feel sick, and now lost " + round(cookiesToEat,0) + " cookies as a penalty.");
            hunger = 0;
        }
    } else if (cookies <= 0)
{
        speak("There aren't enough cookies for you to eat.");
    }
}
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(hunger<=0)
{
hunger=0;
}
if(hunger>=maxhunger)
{
hunger=maxhunger;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
if(bakemode==1 and autocooky>=1)
{
if(clicktimer.elapsed>=clicktime)
{
cookies+=1*autocooky;
pool.play_stationary("autobake.ogg", false);
if(playervents==true) attempt_autobaker_event(evchanse);
clicktimer.restart();
}
else if(bakemode==1 and autocooky<=0)
{
bakemode=0;
pool.destroy_all();
}
}
if (cookies >= cookiesrequiered)
{
    cookiesrequiered = (cookymod * (rank * (rank * difmod)));
hunger+=10 * rank;
    levcoins+=10 * rank;
    rank+=1;
    coins += levcoins;
    if (levcoins >= 1 && levcoins <= 49)
{
        if(coinsfx==true) pool.play_stationary("coin1.ogg", false);
    }
else if (levcoins >= 50 && levcoins <= 999)
{
        if(coinsfx==true) pool.play_stationary("coin50.ogg", false);
    }
else if (levcoins >= 1000 && levcoins <= 9999)
{
        if(coinsfx==true) pool.play_stationary("coin1000.ogg", false);
    }
else if (levcoins >= 10000 && levcoins <= 49999)
{
        if(coinsfx==true) pool.play_stationary("coin10000.ogg", false);
    }
else if (levcoins >= 50000 && levcoins <= 99999)
{
        if(coinsfx==true) pool.play_stationary("coin50000.ogg", false);
    }
else if (levcoins >= 100000 && levcoins <= 999999)
{
        if(coinsfx==true) pool.play_stationary("coin100000.ogg", false);
    }
else if (levcoins >= 1000000)
{
        if(coinsfx==true) pool.play_stationary("coin100000.ogg", false);
    }
    if(ranksfx==true) pool.play_stationary("achievement" + random(1, 2) + ".ogg", false);
    if(rankspeech==true) speak("Congratulations! You've successfully made it to rank " + rank + "! You've earned " + round(levcoins, 0) + " coins for your achievement. Great work!");
if(rank==10)
{
levcoins += 10 * rank*2;
if(coinsfx==true) pool.play_stationary("alert_large.ogg", false);
if(coinspeech==true) dlg("Congratulations "+playername+"! You've successfully unlocked the coin flip minni game. You've also earned an extra "+levcoins+" coins for your hard work. Keep it up!");
}
}
if(alt_is_down())
{
if(key_pressed(KEY_F4))
{
pool.destroy_all();
speak("exiting");
dlgplay("exitgame.ogg");
exit();
}
}
if(control_is_down())
{
if(key_pressed(KEY_S))
{
writedata();
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
speak("game saved");
dlgplay("savegame.ogg");
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
form.reset();
clicker();
}
}
if(key_pressed(KEY_M))
{
speak("You have"+round(coins, 0)+"coins available to spend");
}
if(key_pressed(KEY_R))
{
speak("You're currently rank "+rank+" with "+round(cookies,0)+" cookies. Your next rank requires "+(cookiesrequiered-round(cookies,0))+" cookies.");
}
if(key_pressed(KEY_F))
{
if(autocooky==0 and clicktime==1000)
{
speak("You  produce"+autocooky+"cookies per second.");
}
else if(autocooky==0 and clicktime<=999)
{
speak("You  produce"+autocooky+"cookies every"+clicktime+"milliseconds.");
}
else if(autocooky==1 and clicktime==1000)
{
speak("You  produce"+autocooky+"cooky per second.");
}
else if(autocooky==1 and clicktime<=999)
{
speak("You  produce"+autocooky+"cooky every"+clicktime+"milliseconds.");
}
else if(autocooky>=2 and clicktime==1000)
{
speak("You  produce"+autocooky+"cookies per second.");
}
else if(autocooky>=2 and clicktime<=999)
{
speak("You  produce"+autocooky+"cookies every"+clicktime+"milliseconds.");
}
}
if(key_pressed(KEY_C))
{
if(cookies>=0)
{
speak("You baked a total of "+round(cookies,0)+" cookies.");
}
else if(cookies>=1)
{
speak("You baked a total of"+cookies+"cooky.");
}
else if(cookies>=2)
{
speak("You baked a total of"+cookies+"cookies.");
}
}
if(key_pressed(KEY_H))
{
speak("You are "+round(hunger/maxhunger*100,0)+"percent hungry.");
}
if(key_pressed(KEY_J))
{
if(manulcooky==0)
{
speak("You  produce"+manulcooky+"cookies per press.");
}
else if(manulcooky==1)
{
speak("You  produce"+manulcooky+"cooky per press.");
}
else if(manulcooky>=2)
{
speak("You  produce"+manulcooky+"cookies per press.");
}
}
if (key_pressed(KEY_ESCAPE))
{
pool.pause_sound(ambslot);
pool.pause_sound(mustrackslot);
       alertslot=pool.play_stationary("alert_critical.ogg",false);
    setupmenu();    
    m.add_item_tts("Yes, quit the game without saving");
    m.add_item_tts("Yes, save the game and then quit");
    m.add_item_tts("No, continue playing");
    m.add_item_tts("No, save the game, but continue playing");
    int mres = m.run("Alert! Are you sure you want to quit the game? It's recommended to save your progress before proceeding.", true);
    if (mres == 0)
    {
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
        speak("Continuing the game.");
form.reset();
clicker();
    }
    if (mres == 1)
    {
pool.destroy_all();
        speak("Exiting the game without saving.");
dlgplay("exitgame.ogg");
exit();
    }
    if (mres == 2)
    {
        writedata();
pool.destroy_all();
        speak("game saved, Exiting the game.");
dlgplay("exitgame.ogg");
exit();
    }
    if (mres == 3)
    {
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
        speak("Continuing the game.");
form.reset();
clicker();
    }
    if (mres == 4)
    {
        writedata();
pool.destroy_sound(alertslot);
        speak("game saved, Continuing the game.");
dlgplay("savegame.ogg");
pool.resume_sound(ambslot);
pool.resume_sound(mustrackslot);
form.reset();
clicker();
    }
}
}
}

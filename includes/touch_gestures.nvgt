//touch_gestures
touch_gesture_manager@ touchManager;
const float TAP_MAX_INTERVAL = 0.5;
const float LONG_PRESS_DURATION = 0.7;
class TapTracker {
    float lastTapTime = 0;
    int tapCount = 0;
    bool register_tap(float currentTime, int requiredTaps) {
        if (currentTime - lastTapTime > TAP_MAX_INTERVAL) {
            tapCount = 0;
        }
        tapCount++;
        lastTapTime = currentTime;
        return (tapCount == requiredTaps);
    }
}
class LongPressTracker {
    float pressStartTime = -1;
    bool isPressing = false;
    void start_press(float startTime) {
        pressStartTime = startTime;
        isPressing = true;
    }
    bool check_long_press(float currentTime) {
        if (!isPressing) return false;
        return (currentTime - pressStartTime >= LONG_PRESS_DURATION);
    }
    void release() {
        isPressing = false;
    }
}
dictionary tapTrackers;
dictionary longPressTrackers;
bool swipe_up(int fingers) {
    return check_swipe(swipe_touch_direction_up, fingers);
}
bool swipe_down(int fingers) {
    return check_swipe(swipe_touch_direction_down, fingers);
}
bool swipe_left(int fingers) {
    return check_swipe(swipe_touch_direction_left, fingers);
}
bool swipe_right(int fingers) {
    return check_swipe(swipe_touch_direction_right, fingers);
}
bool check_swipe(int direction, int fingers) {
    if (@touchManager == null) return false;
    touch_screen_finger@[] fingersList = touchManager.get_touch_finger_list();
    if (fingersList.length() != fingers) return false;
    for (uint i = 0; i < fingersList.length(); i++) {
        if (detect_swipe(fingersList[i].start_x, fingersList[i].start_y, fingersList[i].x, fingersList[i].y) == direction) {
            return true;
        }
    }
    return false;
}
bool tap(int fingers) {
    return check_tap(fingers, 1);
}
bool double_tap(int fingers) {
    return check_tap(fingers, 2);
}
bool triple_tap(int fingers) {
    return check_tap(fingers, 3);
}
bool check_tap(int fingers, int requiredTaps) {
    if (@touchManager == null) return false;
    touch_screen_finger@[] fingersList = touchManager.get_touch_finger_list();
    if (fingersList.length() != fingers) return false;
float currentTime = ticks() / 1000.0;
    TapTracker@ tracker;
    if (!tapTrackers.get(fingers, @tracker)) {
        @tracker = TapTracker();
        tapTrackers.set(fingers, @tracker);
    }
    return tracker.register_tap(currentTime, requiredTaps);
}
bool long_press(int fingers) {
    if (@touchManager == null) return false;
    touch_screen_finger@[] fingersList = touchManager.get_touch_finger_list();
    if (fingersList.length() != fingers) return false;
    float currentTime = ticks() / 1000.0;
    LongPressTracker@ tracker;
    if (!longPressTrackers.get(fingers, @tracker)) {
        @tracker = LongPressTracker();
        longPressTrackers.set(fingers, @tracker);
    }
    if (!tracker.isPressing) {
        tracker.start_press(currentTime);
    }
    return tracker.check_long_press(currentTime);
}
void release_long_press(int fingers) {
    LongPressTracker@ tracker;
    if (longPressTrackers.get(fingers, @tracker)) {
        tracker.release();
    }
}

bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
bool validate_event_selection(int autoEventList, int manualEventList)
{
    bool hasPositiveAuto = false;
    bool hasNegativeAuto = false;
    bool hasPositiveManual = false;
    bool hasNegativeManual = false;
    string[] positiveAutoEvents = {"bonus_cookies", "decrease_hunger", "increase_cookyspeed", "gain_coins", "gain_autocooky", "gain_manulcooky"};
    string[] negativeAutoEvents = {"fire_spark", "extra_hunger", "decrease_cookyspeed", "lose_coins", "lose_autocooky", "lose_manulcooky"};
    string[] positiveManualEvents = {"bonus_cookies", "decrease_hunger", "increase_cookyspeed", "gain_coins", "gain_autocooky", "gain_manulcooky"};
    string[] negativeManualEvents = {"fire_spark", "extra_hunger", "decrease_cookyspeed", "lose_coins", "lose_autocooky", "lose_manulcooky"};
    for (uint i = 0; i < autoBakingEvents.length(); i++)
{
        if (form.is_list_item_checked(autoEventList, i))
{
            if (positiveAutoEvents.find(autoBakingEvents[i]) > -1) hasPositiveAuto = true;
            if (negativeAutoEvents.find(autoBakingEvents[i]) > -1) hasNegativeAuto = true;
        }
    }
    for (uint i = 0; i < manualBakingEvents.length(); i++)
{
        if (form.is_list_item_checked(manualEventList, i))
{
            if (positiveManualEvents.find(manualBakingEvents[i]) > -1) hasPositiveManual = true;
            if (negativeManualEvents.find(manualBakingEvents[i]) > -1) hasNegativeManual = true;
        }
    }
    return (hasPositiveAuto && hasNegativeAuto && hasPositiveManual && hasNegativeManual);
}

double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
double buy_item(double item, double base_cost, double cost_multiplier)
{
return 1+(item*0.1)*base_cost*cost_multiplier;
}
double get_save_rank(string saveFile)
{
    if (!file_exists(saveFile))
    {
        return -1;
    }
    savedata tempSave(saveFile, "rQP8u9I5iWYwcmwPkJ5EzU3ri4r6IQFP77dvgYedgyGQPxzHEi1eKGdBEENLRbYEWBr3hAmmQLgyevhYJJ7Q3sUQt5n6BKjzYVZMWQb2LyYx");
    tempSave.load();
    if (tempSave.d.exists("rank"))
    {
        return tempSave.read_double("rank");
    }
    return 0;
}

int string_to_int(string str)
{
    int result = 0;
    bool isNegative = false;
    if (str.length() == 0)
        return 0;
    if (str.substr(0, 1) == "-")
    {
        isNegative = true;
        str = str.substr(1);
    }
    for (uint i = 0; i < str.length(); i++)
    {
        string digitStr = str.substr(i, 1);
        int digit = 0;
        if (digitStr == "0") digit = 0;
        else if (digitStr == "1") digit = 1;
        else if (digitStr == "2") digit = 2;
        else if (digitStr == "3") digit = 3;
        else if (digitStr == "4") digit = 4;
        else if (digitStr == "5") digit = 5;
        else if (digitStr == "6") digit = 6;
        else if (digitStr == "7") digit = 7;
        else if (digitStr == "8") digit = 8;
        else if (digitStr == "9") digit = 9;
        else return 0;
        result = result * 10 + digit;
    }
    return isNegative ? -result : result;
}

string convert_to_currency(double number, string currency_symbol)
{
if (number < 0) return "";
uint dollars = number / 100;
uint cents = number % 100;
string cents_str = "" + cents;
if (string_len (cents_str) == 1) cents_str = "0" + cents_str;
return currency_symbol + dollars + "." + cents_str;
}
string random_string(string[] array)
{
string retval=array[random(0,array.length()-1)];
return retval;
}
void buffercheck()
{
if(key_repeating(KEY_COMMA))
{
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
top_buffer_item();
}
else
{
previous_buffer_item();
}
}
if(key_repeating(KEY_PERIOD))
{
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
bottom_buffer_item();
}
else
{
next_buffer_item();
}
}
if(key_repeating(KEY_LBRACKET))
{
previous_buffer();
}
if(key_repeating(KEY_RBRACKET))
{
next_buffer();
}
if (control_is_down())
{
if (key_repeating(KEY_M))
{
mute_and_unmute_buffer();
}
}
if(shift_is_down())
{
if (key_repeating(KEY_C))
{
copy_buffer_item();
}
if (key_repeating(KEY_BACKSLASH))
{
speak("buffers exported");
export_buffers();
clear_all_buffer_items();
}
}
}

void set_save_slot(int slot)
{
    currentSaveSlot = "data/game" + string(slot) + ".crz";
    sd = savedata(currentSaveSlot, "rQP8u9I5iWYwcmwPkJ5EzU3ri4r6IQFP77dvgYedgyGQPxzHEi1eKGdBEENLRbYEWBr3hAmmQLgyevhYJJ7Q3sUQt5n6BKjzYVZMWQb2LyYx");
}

void wait_async(int milliseconds)
{
    timer WaitTimer;
    WaitTimer.restart();    
    while (WaitTimer.elapsed < milliseconds)
    {
        wait(5);
        form.monitor();
int betChoice, betInput, symbolChoices;
if(form.get_current_focus()!=betChoice and form.get_current_focus()!=betInput and form.get_current_focus()!=symbolChoices) slots_game_input();
        key_code[] keys = keys_pressed();
        for (uint i = 0; i < keys.length(); i++)
        {
            key_code key = keys[i];
        }
    }
}

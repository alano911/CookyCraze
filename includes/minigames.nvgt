void coingame()
{
    form.reset();
    form.create_window("Coin flipper", false);
string[] coinFlipEvents = {"gain_autocooky", "lose_autocooky", "gain_manulcooky", "lose_manulcooky", "gain_cookies", "lose_cookies", "increase_hunger", "decrease_hunger", "gain_coins", "lose_coins", "increase_cookyspeed", "decrease_cookyspeed"};
    int coinEventList = form.create_list("Choose the &coin events to use:", coinFlipEvents.length(), true, false);
bool[] coinEventToggles(coinFlipEvents.length(), true);
    for (uint i = 0; i < coinFlipEvents.length(); i++)
{
        form.add_list_item(coinEventList, coinFlipEvents[i], coinFlipEvents[i], -1, coinEventToggles[i]);
    }
int flip = form.create_button("&Flip a coin", true);
    form.focus(coinEventList);
    while (true)
    {
        form.monitor();
        wait(5);
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(hunger<=0)
{
hunger=0;
}
if(hunger>=maxhunger)
{
hunger=maxhunger;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
if(form.get_current_focus()!=coinEventList)
{
        if (key_repeating(KEY_C))
{
speak_buffer("You have " + round(cookies, 0) + " cookies.");
}
        if (key_repeating(KEY_A))
{
speak_buffer("You have " + round(autocooky, 0) + " auto cookies.");
}
        if (key_repeating(KEY_S))
{
speak_buffer("You have " + round(cookyspeed, 0) + " auto cookie speeds.");
}
        if (key_repeating(KEY_M))
{
speak_buffer("You have " + round(manulcooky, 0) + " manual cookies.");
}
        if (key_repeating(KEY_O))
{
pool.destroy_sound(coinslot);
if(coins>0) coinslot=pool.play_stationary("cointoss.ogg", false);
speak_buffer("You have " + round(coins, 0) + " coins.");
}
if(key_repeating(KEY_H))
{
speak_buffer("You are "+round(hunger/maxhunger*100,0)+"percent hungry.", "misc");
}
}
        if (key_repeating(KEY_ESCAPE))
        {
pool.destroy_sound(gameslot);
            mingamsmenu();
        }
if (form.is_pressed(flip))
{
    if (coins >= 1)
    {
        string[] activeCoinEvents;
        string[] headsEvents;
        string[] tailsEvents;

        // Gather checked coin events
        for (uint i = 0; i < coinFlipEvents.length(); i++)
        {
            if (form.is_list_item_checked(coinEventList, i))
            {
                activeCoinEvents.insert_last(coinFlipEvents[i]);

                // Categorize events
                if (coinFlipEvents[i].find("gain") >= 0 || coinFlipEvents[i] == "decrease_hunger")
                {
                    headsEvents.insert_last(coinFlipEvents[i]);
                }
                else if (coinFlipEvents[i].find("lose") >= 0 || coinFlipEvents[i] == "increase_hunger")
                {
                    tailsEvents.insert_last(coinFlipEvents[i]);
                }
            }
        }

        // Ensure at least one positive and one negative event are selected
        if (headsEvents.length() == 0 || tailsEvents.length() == 0)
        {
            dlg_buffer("You must select at least one positive and one negative event before flipping the coin! Press enter to continue.");
            form.reset();
            coingame();
        }

        // Flip the coin
        string[] coinsides = { "heads", "tails" };
        string side = coinsides[random(0, coinsides.length() - 1)];
        pool.destroy_sound(eventslot);
        pool.play_stationary("coinflip.ogg", false);
        dlg_buffer("You flip a coin. It lands on " + side);

        if (side == "heads" && headsEvents.length() > 0)
        {
            string event = headsEvents[random(0, headsEvents.length() - 1)];
            trigger_coin_event(event, activeCoinEvents);
            form.focus_silently(flip);
        }
        else if (side == "tails" && tailsEvents.length() > 0)
        {
            string event = tailsEvents[random(0, tailsEvents.length() - 1)];
            trigger_coin_event(event, activeCoinEvents);
            form.focus_silently(flip);
        }
    }
    else
    {
        dlg_buffer("You don't have a coin to flip! Press enter to continue.", "general");
        form.reset();
        coingame();
    }
}
}
}
void slotsgame()
{
    form.reset();
    form.create_window("Slot Machine", false);
    int betChoice = form.create_list("Choose an &item to bet:", 5);
    form.add_list_item(betChoice, "Cookies");
    form.add_list_item(betChoice, "Coins");
    form.add_list_item(betChoice, "Auto Cookies");
    form.add_list_item(betChoice, "Auto Cookie Speeds");
    form.add_list_item(betChoice, "Manual Cookies");
string[] symbols;
if(orderedSyms==true)
{
symbols = {"apple", "banana", "bean", "bell", "bottel", "bronze", "car", "carot", "celery", "chain", "chime", "clover", "copper", "crate", "crown", "diamond", "flower", "gem", "glass", "gold", "grape", "heart", "iron", "leef", "metal", "nickle", "orange", "peach", "pebble", "pepper", "pees", "potato", "rack", "rock", "rose", "silver", "spade", "star", "stone", "tomato"};
}
if(orderedSyms==false)
{
symbols = {"bell", "chime", "heart", "pebble", "star", "clover", "diamond", "spade", "crown", "gem", "apple", "grape", "peach", "orange", "banana", "gold", "silver", "bronze", "iron", "copper", "crate", "stone", "nickle", "pepper", "tomato", "carot", "celery", "bean", "pees", "potato", "car", "glass", "bottel", "rack", "chain", "metal", "rock", "leef", "flower", "rose"};
}
    int symbolChoices = form.create_list("Choose the s&ymbols to use:", symbols.length(), true, false);
    bool[] symbolToggles(symbols.length(), true);
    for (uint i = 0; i < symbols.length(); i++)
{
        form.add_list_item(symbolChoices, symbols[i], symbols[i], -1, symbolToggles[i]);
    }
int betInput = form.create_input_box("Enter your b&et amount:", "", "", 0, false, false, false);
    int spinButton = form.create_button("Spin the &reels", true);
form.focus(betChoice);
form.set_disallowed_chars(betInput, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string reel1 = "", reel2 = "", reel3 = "", reel4 = "", reel5 = "";
    int selectedBet = 0;
    double betAmount = 0;
    while (true)
    {
        form.monitor();
        wait(5);
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
if(form.get_current_focus()!=betChoice and form.get_current_focus()!=betInput and form.get_current_focus()!=symbolChoices)
{
        if (key_repeating(KEY_C))
{
speak_buffer("You have " + round(cookies, 0) + " cookies.");
}
        if (key_repeating(KEY_A))
{
speak_buffer("You have " + round(autocooky, 0) + " auto cookies.");
}
        if (key_repeating(KEY_S))
{
speak_buffer("You have " + round(cookyspeed, 0) + " auto cookie speeds.");
}
        if (key_repeating(KEY_M))
{
speak_buffer("You have " + round(manulcooky, 0) + " manual cookies.");
}
        if (key_repeating(KEY_O))
{
pool.destroy_sound(coinslot);
if(coins>0) coinslot=pool.play_stationary("cointoss.ogg", false);
speak_buffer("You have " + round(coins, 0) + " coins.");
}
}
        if (key_repeating(KEY_ESCAPE))
        {
pool.destroy_sound(gameslot);
            mingamsmenu();
        }
        if (form.is_pressed(spinButton))
        {
            selectedBet = form.get_list_position(betChoice);
betAmount =string_to_number(form.get_text(betInput));
    if (betAmount <= 0)
    {
        dlg_buffer("Invalid bet amount. Please enter a valid number! Press enter to continue.");
form.reset();
slotsgame();
    }
            if ((selectedBet == 0 && cookies < betAmount) || (selectedBet == 1 && coins < betAmount) || (selectedBet == 2 && autocooky < betAmount) || (selectedBet == 3 && cookyspeed < betAmount) || (selectedBet == 4 && manulcooky < betAmount))
            {
                dlg_buffer("You don't have enough of that item to bet! Press enter to continue.");
form.reset();
slotsgame();
            }
            string[] activeSymbols;
            for (uint i = 0; i < symbols.length(); i++)
{
                if (form.is_list_item_checked(symbolChoices, i))
{ 
                    activeSymbols.insert_last(symbols[i]); 
                }
            }
            if (activeSymbols.length()<10)
{
                dlg_buffer("You must select at least 10 symbols in order to spin! Press enter to continue.");
form.reset();
slotsgame();
            }
pool.destroy_sound(machineslot);
pool.play_stationary("slotbet1.ogg", false);
if(selectedBet==0) speak_buffer("You placed a bet of " + round(betAmount, 0) + " items on cookies.");
if(selectedBet==1) speak_buffer("You placed a bet of " + round(betAmount, 0) + " items on coins.");
if(selectedBet==2) speak_buffer("You placed a bet of " + round(betAmount, 0) + " items on auto cookies.");
if(selectedBet==3) speak_buffer("You placed a bet of " + round(betAmount, 0) + " items on auto cooky speeds.");
if(selectedBet==4) speak_buffer("You placed a bet of " + round(betAmount, 0) + " items on manual cookies.");
wait(1000);
pool.play_stationary("slotbet2.ogg", false);
wait(random(600, 800));
pool.play_stationary("slotbet3.ogg", false);
wait(1000);
pool.play_stationary("slotlever.ogg", false);
machineslot=pool.play_stationary("slotspin.ogg", true);
if(slotmode==true) speak_buffer("spinning...");
if(slotmode==false) dlg_buffer("spinning. Press enter to stop each reel.");
if(slotmode==true) wait(random(1000,2000));
            for (uint i = 0; i < 5; i++)
            {
                if (i == 0) 
                {
            reel1 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotstop1.ogg", false);
if(slotmode==true) speak_buffer(reel1);
else if(slotmode==false) dlg_buffer("The first reel shows " + reel1);
                }
                else if (i == 1) 
                {
            reel2 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait(random(1000, 2000));
pool.play_stationary("slotstop2.ogg", false);
if(slotmode==true) speak_buffer(reel2);
else if(slotmode==false) dlg_buffer("The second reel shows " + reel2);
                }
                else if (i == 2) 
                {
            reel3 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait(random(1000, 2000));
pool.play_stationary("slotstop3.ogg", false);
if(slotmode==true) speak_buffer(reel3);
else if(slotmode==false) dlg_buffer("The third reel shows " + reel3);
                }
                else if (i == 3) 
                {
            reel4 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait(random(1000, 2000));
pool.play_stationary("slotstop1.ogg", false);
if(slotmode==true) speak_buffer(reel4);
else if(slotmode==false) dlg_buffer("The forth reel shows " + reel4);
                }
                else if (i == 4) 
                {
            reel5 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait(random(1000, 2000));
pool.play_stationary("slotstop2.ogg", false);
if(slotmode==true) speak_buffer(reel5);
else if(slotmode==false) dlg_buffer("The fith reel shows " + reel5);
                }
            }
int[] symbolCount(symbols.length(), 0);
string[] reels = {reel1, reel2, reel3, reel4, reel5};
for (uint i = 0; i < reels.length(); i++)
{
    for (uint j = 0; j < symbols.length(); j++)
    {
        if (reels[i] == symbols[j])
        {
            symbolCount[j]++;
        }
    }
}
int maxMatch = 0;
for (uint i = 0; i < symbolCount.length(); i++)
{
    if (symbolCount[i] > maxMatch)
    {
        maxMatch = symbolCount[i];
    }
}
if (maxMatch == 5)
{
            if(slotmode==true) wait(random(1000, 2000));
pool.destroy_sound(machineslot);
                pool.play_stationary("slotwin1.ogg", false);
                dlg_buffer("You won 4 times your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount*4;
}
                else if (selectedBet == 1)
{
coins += betAmount*4;
}
                else if (selectedBet == 2)
{
autocooky += betAmount*4;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount*4;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount*4;
}
            }
else if (maxMatch == 4)
            {
if(slotmode==true) wait(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotwin1.ogg", false);
                dlg_buffer("You won triple your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount*3;
}
                else if (selectedBet == 1)
{
coins += betAmount*3;
}
                else if (selectedBet == 2)
{
autocooky += betAmount*3;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount*3;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount*3;
}
            }
else if (maxMatch == 3)
            {
if(slotmode==true) wait(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotwin2.ogg", false);
                dlg_buffer("You won double your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount*2;
}
                else if (selectedBet == 1)
{
coins += betAmount*2;
}
                else if (selectedBet == 2)
{
autocooky += betAmount*2;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount*2;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount*2;
}
            }
else if (maxMatch == 2)
            {
if(slotmode==true) wait(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotwin3.ogg", false);
                dlg_buffer("You won half your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount/2;
}
                else if (selectedBet == 1)
{
coins += betAmount/2;
}
                else if (selectedBet == 2)
{
autocooky += betAmount/2;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount/2;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount/2;
}
            }
            else
            {
if(slotmode==true) wait(random(1000, 2000));
pool.destroy_sound(machineslot);
                pool.play_stationary("slotlose.ogg", false);
                dlg_buffer("You lost the bet!");
form.focus(spinButton);
            if (selectedBet == 0)
{
cookies -= betAmount;
}
            else if (selectedBet == 1)
{
coins -= betAmount;
}
            else if (selectedBet == 2)
{
autocooky -= betAmount;
}
            else if (selectedBet == 3)
{
cookyspeed -= betAmount;
clicktime+=cookyspeed;
}
            else if (selectedBet == 4)
{
manulcooky -= betAmount;
}
            }
        }
}
    }

void toygame()
{
toyambslot=toyambpool.play_stationary_extended("toyamb.ogg",true,0,0,toyambvolume,toyambpitch,false);
toytrackslot=toymuspool.play_stationary_extended("toymusic.ogg",true,0,0,toymusvolume,toymuspitch,false);
while(true)
{
wait(5);
bfloop();
carloop();
gardloop();
toyloop();
p.update_listener_2d(me.x,me.y);
carpool.update_listener_2d(me.x,me.y);
gardpool.update_listener_2d(me.x,me.y);
toypool.update_listener_2d(me.x,me.y);
if(carspawntimer.elapsed>=carspawntime and cars.length()<carnum and carspawn==true)
{
int carchoice;
if(carchoice==1) spawn_car(random(0,maxx), random(0,maxy), random(0,1), random(0,1), random(5,10), random(100,1000), "car1");
if(carchoice==2) spawn_car(random(0,maxx), random(0,maxy), random(0,1), random(0,1), random(5,10), random(100,1000), "car2");
if(carchoice==3) spawn_car(random(0,maxx), random(0,maxy), random(0,1), random(0,1), random(5,10), random(100,1000), "car3");
carchoice=random(1,3);
carspawntimer.restart();
}
if(gardspawntimer.elapsed>=gardspawntime and gards.length()<gardnum and gardspawn==true)
{
int gardchoice;
if(gardchoice==1) spawn_gard(random(0,maxx), random(0,maxy), random(5,10), random(5,10), random(100,1000), random(100,1000), "gard1");
if(gardchoice==2) spawn_gard(random(0,maxx), random(0,maxy), random(10,20), random(10,20), random(100,1000), random(100,1000), "gard2");
gardchoice=random(1,2);
gardspawntimer.restart();
}
if(toyspawntimer.elapsed>=toyspawntime and toys.length()<toynum and toyspawn==true)
{
spawn_toy(random(0,maxx), random(0,maxy));
toyspawntimer.restart();
}
if(gametimer.elapsed>=1000*60)
{
carspawn=true;
toynum=25;
}
if(gametimer.elapsed>=1000*120)
{
carnum=10;
toynum=30;
}
if(gametimer.elapsed>=1000*180)
{
gardspawn=true;
carnum=20;
toynum=35;
}
if(gametimer.elapsed>=1000*240)
{
carnum=30;
gardnum=20;
toynum=50;
}
if(key_pressed(KEY_ESCAPE))
{
carspawn=false;
gardspawn=false;
toyspawn=false;
collected_toys=0;
destroyed_cars=0;
killed_gards=0;
destroy_all_cars();
destroy_all_gards();
destroy_all_toys();
pool.destroy_sound(gameslot);
toyambpool.destroy_sound(toyambslot);
toymuspool.destroy_sound(toytrackslot);
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
ambslot=ambpool.play_stationary_extended(ambtype+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended(mustype+".ogg", true,0,0,musvolume,muspitch,false);
mingamsmenu();
}
if(key_pressed(KEY_1))
{
weapontype="bat";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_2))
{
weapontype="boot";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_3))
{
weapontype="club";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_4))
{
weapontype="feat";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_5))
{
weapontype="fist";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_6))
{
weapontype="hammer";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_7))
{
weapontype="knife";
speak(weapontype+" equipped");
p.play_stationary(weapontype+"draw.ogg", false);
}
if(key_pressed(KEY_T))
{
speak("You have collected "+collected_toys+" toys.");
}
if(key_pressed(KEY_O))
{
speak("There are "+toys.length()+" collectible toys on the field.");
}
if(key_pressed(KEY_S))
{
speak("You have destroyed "+destroyed_cars+" cars.");
}
if(key_pressed(KEY_R))
{
speak("There are "+cars.length()+" destroyable cars on the field.");
}
if(key_pressed(KEY_Y))
{
speak("You've been playing for a total of;"+timeelapsed.m()+"minutes,"+timeelapsed.s()+"seconds");
}
if(key_pressed(KEY_H))
{
speak("You have"+health+" hp remaining.");
}
if(key_pressed(KEY_Q))
{
speak("You have killed"+killed_gards+" gards.");
}
if(key_pressed(KEY_E))
{
speak("There are "+gards.length()+" killible gards on the field.");
}
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
movetime=runtime;
}
else
{
movetime=walktime;
}
if (key_down(KEY_LEFT) and movetimer.elapsed>=movetime and me.x!=0)
{
me.x-=1;
p.play_stationary("step"+random(1,5)+".ogg", false);
movetimer.restart();
}
if (key_down(KEY_RIGHT) and movetimer.elapsed>=movetime and me.x!=maxx)
{
me.x+=1;
p.play_stationary("step"+random(1,5)+".ogg", false);
movetimer.restart();
}
if (key_down(KEY_DOWN) and movetimer.elapsed>=movetime and me.y!=0)
{
me.y-=1;
p.play_stationary("step"+random(1,5)+".ogg", false);
movetimer.restart();
}
if (key_down(KEY_UP) and movetimer.elapsed>=movetime and me.y!=maxy)
{
me.y+=1;
p.play_stationary("step"+random(1,5)+".ogg", false);
movetimer.restart();
}
if(key_pressed(KEY_SPACE) and firetimer.elapsed>=firetime)
{
if(weapontype=="bat") p.play_stationary(weapontype+"fire"+random(1,3)+".ogg", false);
if(weapontype=="boot") p.play_stationary(weapontype+"fire"+random(1,3)+".ogg", false);
if(weapontype=="club") p.play_stationary(weapontype+"fire"+random(1,3)+".ogg", false);
if(weapontype=="feat") p.play_stationary(weapontype+"fire"+random(1,3)+".ogg", false);
if(weapontype=="fist") p.play_stationary(weapontype+"fire"+random(1,2)+".ogg", false);
if(weapontype=="hammer") p.play_stationary(weapontype+"fire"+random(1,3)+".ogg", false);
if(weapontype=="knife") p.play_stationary(weapontype+"fire"+random(1,3)+".ogg", false);
firetimer.restart();
for(uint i = 0; i < cars.length(); i++)
{
if(absolute(cars[i].carx - me.x) <= weprange and absolute(cars[i].cary - me.y) <= weprange2)
{
if(weapontype=="bat") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
if(weapontype=="boot") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
if(weapontype=="club") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
if(weapontype=="feat") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
if(weapontype=="fist") p.play_2d(weapontype+"hit"+random(1,2)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
if(weapontype=="hammer") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
if(weapontype=="knife") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,cars[i].carx,cars[i].cary, false);
cars[i].hurtsound=carpool.play_2d(cars[i].cartype+"pain.ogg",me.x,me.y,cars[i].carx,cars[i].cary,false);
cars[i].carhealth-=wepdamage;
}
}
for(uint i = 0; i < gards.length(); i++)
{
if(absolute(gards[i].gardx - me.x) <= weprange and absolute(gards[i].gardy - me.y) <= weprange2)
{
if(weapontype=="bat") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
if(weapontype=="boot") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
if(weapontype=="club") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
if(weapontype=="feat") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
if(weapontype=="fist") p.play_2d(weapontype+"hit"+random(1,2)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
if(weapontype=="hammer") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
if(weapontype=="knife") p.play_2d(weapontype+"hit"+random(1,3)+".ogg",me.x,me.y,gards[i].gardx,gards[i].gardy, false);
gards[i].hurtsound=gardpool.play_2d(gards[i].gardtype+"pain.ogg",me.x,me.y,gards[i].gardx,gards[i].gardy,false);
gards[i].gardhealth-=wepdamage;
}
}
}
if(key_pressed(KEY_C))
{
speak(me.x+", "+me.y);
}
}
}
